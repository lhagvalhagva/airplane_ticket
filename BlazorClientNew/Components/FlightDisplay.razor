@page "/flights"
@using BlazorClientNew.Models
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h3>Flight Information Display</h3>

    @if (flights == null)
    {
        <div class="alert alert-info">Loading flights...</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Flight Number</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Departure</th>
                        <th>Arrival</th>
                        <th>Status</th>
                        <th>Available Seats</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var flight in flights)
                    {
                        <tr>
                            <td>@flight.FlightNumber</td>
                            <td>@flight.DepartureCity</td>
                            <td>@flight.ArrivalCity</td>
                            <td>@flight.DepartureTime.ToString("HH:mm")</td>
                            <td>@flight.ArrivalTime.ToString("HH:mm")</td>
                            <td class="@GetStatusClass(flight.Status)">@GetStatusText(flight.Status)</td>
                            <td>@flight.AvailableSeats</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Flight>? flights;
    private HubConnection? hubConnection;
    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initial load of flights
            await LoadFlights();

            // Setup SignalR connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/flightHub"))
                .WithAutomaticReconnect()
                .Build();

            // Register for flight status updates
            hubConnection.On<int, FlightStatus>("ReceiveFlightStatusUpdate", async (flightId, newStatus) =>
            {
                await HandleFlightStatusUpdate(flightId, newStatus);
            });

            // Register for complete flight updates
            hubConnection.On<Flight>("ReceiveFlightUpdate", async (flight) =>
            {
                await HandleFlightUpdate(flight);
            });

            await hubConnection.StartAsync();
            isInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            if (hubConnection != null)
            {
                await hubConnection.DisposeAsync();
                hubConnection = null;
            }
        }
    }

    private async Task HandleFlightStatusUpdate(int flightId, FlightStatus newStatus)
    {
        if (flights == null) return;

        var flight = flights.FirstOrDefault(f => f.Id == flightId);
        if (flight != null)
        {
            flight.Status = newStatus;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            await LoadFlights();
        }
    }

    private async Task HandleFlightUpdate(Flight updatedFlight)
    {
        if (flights == null) return;

        var existingFlight = flights.FirstOrDefault(f => f.Id == updatedFlight.Id);
        if (existingFlight != null)
        {
            var index = flights.IndexOf(existingFlight);
            flights[index] = updatedFlight;
        }
        else
        {
            flights.Add(updatedFlight);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadFlights()
    {
        try
        {
            flights = await Http.GetFromJsonAsync<List<Flight>>("api/flights") ?? new List<Flight>();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading flights: {ex.Message}");
            flights = new List<Flight>();
        }
    }

    private string GetStatusClass(FlightStatus status) => status switch
    {
        FlightStatus.CheckingIn => "text-primary",
        FlightStatus.Boarding => "text-warning",
        FlightStatus.Departed => "text-success",
        FlightStatus.Delayed => "text-danger",
        FlightStatus.Cancelled => "text-danger",
        _ => ""
    };

    private string GetStatusText(FlightStatus status) => status switch
    {
        FlightStatus.CheckingIn => "Checking In",
        FlightStatus.Boarding => "Boarding",
        FlightStatus.Departed => "Departed",
        FlightStatus.Delayed => "Delayed",
        FlightStatus.Cancelled => "Cancelled",
        _ => status.ToString()
    };

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
} 