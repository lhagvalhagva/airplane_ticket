@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Linq
@using BlazorClient.Components
@using Microsoft.AspNetCore.SignalR.Client
@using DataAccess.Models
@inject NavigationManager Navigation
@inject HttpClient Http

<h2 class="departures-title">Нислэгийн мэдээлэл</h2>

@if (isLoading)
{
    <div class="loading-indicator">
        <p>Нислэгийн мэдээлэл ачаалж байна...</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">
        <p>@errorMessage</p>
        <button @onclick="LoadFlightsFromApi" class="reload-button">Дахин оролдох</button>
    </div>
}
else if (flights.Count == 0)
{
    <div class="no-data-message">
        <p>Нислэгийн мэдээлэл олдсонгүй</p>
        <button @onclick="LoadFlightsFromApi" class="reload-button">Дахин оролдох</button>
    </div>
}
else
{
    <table class="departures-table">
        <thead>
            <tr>
                <th>Цаг</th>
                <th>Чиглэл</th>
                <th>Нислэг</th>
                <th>Гарц</th>
                <th>Төлөв</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in flights)
            {
                <tr>
                    <td>@flight.Time</td>
                    <td>@flight.Destination</td>
                    <td>@flight.FlightNumber</td>
                    <td>@flight.Gate</td>
                    <td class="@GetStatusClass(flight.StatusText)">@flight.StatusText</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection? hubConnection;
    
    private class ApiResponse<T>
    {
        [JsonPropertyName("$id")]
        public string Id { get; set; }

        [JsonPropertyName("$values")]
        public List<T> Values { get; set; }
    }

    private List<FlightInfoModel> flights = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Нислэгийн мэдээлэл татах
            await LoadFlightsFromApi();
            
            // SignalR Hub-тай холбогдох
            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5027/flighthub")
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(5) })
                .Build();
            
            // Нислэгийн төлөв өөрчлөгдсөн тухай мэдэгдэл хүлээн авах
            hubConnection.On<int, DataAccess.Models.FlightStatus>("ReceiveFlightStatusUpdate", HandleFlightStatusUpdate);
            Console.WriteLine("Registered ReceiveFlightStatusUpdate handler");
            
            // Add reconnection event handlers
            hubConnection.Closed += async (error) => {
                Console.WriteLine($"SignalR connection closed due to: {error?.Message}");
                await Task.Delay(new Random().Next(0, 5) * 1000);
                await ConnectToSignalR();
            };
            
            // Connect to hub
            await ConnectToSignalR();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    // Connect to SignalR hub
    private async Task ConnectToSignalR()
    {
        try {
            if (hubConnection.State != HubConnectionState.Connected) {
                await hubConnection.StartAsync();
                Console.WriteLine("Successfully connected to SignalR hub");
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error connecting to SignalR hub: {ex.Message}");
        }
    }

    private async Task LoadFlightsFromApi()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var apiUrl = "http://localhost:5027/api/Flights";
            
            var response = await Http.GetFromJsonAsync<List<DataAccess.Models.Flight>>(apiUrl);

            if (response != null)
            {
                flights = response.Select(f => new FlightInfoModel
                {
                    Id = f.Id,
                    FlightNumber = f.FlightNumber,
                    DepartureCity = f.DepartureCity,
                    ArrivalCity = f.ArrivalCity,
                    DepartureTime = f.DepartureTime,
                    ArrivalTime = f.ArrivalTime,
                    Status = (int)f.Status
                }).ToList();
                
                foreach (var flight in flights)
                {
                    Console.WriteLine($"Flight: {flight.FlightNumber}, Time: {flight.Time}, Destination: {flight.Destination}, Gate: {flight.Gate}, Status: {flight.StatusText}");
                }
                
                Console.WriteLine($"Loaded {flights.Count} flights successfully");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading flight information: {ex.Message}";
            Console.WriteLine($"Error in LoadFlightsFromApi: {ex.Message}");
            Console.WriteLine(ex.ToString());
        }

        finally
        {
            isLoading = false;
        }


    }

    private string GetStatusClass(string status) => status switch
    {
        "Бүртгэж байна" => "status-checkin",
        "Онгоцонд сууж байна" => "status-boarding",
        "Ниссэн" => "status-departed",
        "Хойшилсон" => "status-delayed",
        "Цуцалсан" => "status-cancelled",
        _ => ""
    };
    
    // Function called when flight status changes (via SignalR)
    private async Task HandleFlightStatusUpdate(int flightId, DataAccess.Models.FlightStatus newStatus)
    {
        try
        {
            Console.WriteLine($"Received flight status update notification: ID={flightId}, Status={newStatus}");
            
            // Find and update flight status
            var flight = flights.FirstOrDefault(f => f.Id == flightId);
            if (flight != null)
            {
                // Store previous status for visual effect
                var oldStatus = flight.Status;
                flight.Status = (int)newStatus;
                
                Console.WriteLine($"Төлөв өөрчлөгдсөн: {flight.FlightNumber}, хуучин төлөв={flight.StatusText}, шинэ төлөв={((DataAccess.Models.FlightStatus)newStatus)}");
                
                // Update UI
                await InvokeAsync(() => {
                    StateHasChanged();
                    Console.WriteLine($"Дэлгэц шинэчлэгдсэн: {flight.FlightNumber}, шинэ төлөв={flight.StatusText}");
                });
            }
            else
            {
                Console.WriteLine($"Нислэг олдсонгүй ID={flightId}");
                // Consider refreshing all flights if flight is not found
                await LoadFlightsFromApi();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Төлөв шинэчлэх үед алдаа гарлаа: {ex.Message}");
        }
    }
    // Dispose SignalR connection when component is disposed
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            Console.WriteLine("Disposing SignalR connection");
            await hubConnection.DisposeAsync();
        }
    }
}