@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Linq
@using BlazorClient.Components
@using Microsoft.AspNetCore.SignalR.Client
@using DataAccess.Models
@inject NavigationManager Navigation
@inject HttpClient Http

<h2 class="departures-title">Нислэгийн мэдээлэл</h2>

@if (isLoading)
{
    <div class="loading-indicator">
        <p>Нислэгийн мэдээлэл ачаалж байна...</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">
        <p>@errorMessage</p>
        <button @onclick="LoadFlightsFromApi" class="reload-button">Дахин оролдох</button>
    </div>
}
else if (flights.Count == 0)
{
    <div class="no-data-message">
        <p>Нислэгийн мэдээлэл олдсонгүй</p>
        <button @onclick="LoadFlightsFromApi" class="reload-button">Дахин оролдох</button>
    </div>
}
else
{
    <table class="departures-table">
        <thead>
            <tr>
                <th>Цаг</th>
                <th>Чиглэл</th>
                <th>Нислэг</th>
                <th>Гарц</th>
                <th>Төлөв</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in flights)
            {
                <tr>
                    <td>@flight.Time</td>
                    <td>@flight.Destination</td>
                    <td>@flight.FlightNumber</td>
                    <td>@flight.Gate</td>
                    <td class="@GetStatusClass(flight.StatusText)">@flight.StatusText</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection? hubConnection;
    
    private class ApiResponse<T>
    {
        [JsonPropertyName("$id")]
        public string Id { get; set; }

        [JsonPropertyName("$values")]
        public List<T> Values { get; set; }
    }

    private List<FlightInfoModel> flights = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Нислэгийн мэдээлэл татах
            await LoadFlightsFromApi();
            
            // SignalR Hub-тай холбогдох
            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5027/flighthub")
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(5) })
                .Build();
            
            Console.WriteLine($"Created SignalR connection to {hubConnection.ConnectionId ?? "not connected"}");
            
            // Нислэгийн төлөв өөрчлөгдсөн тухай мэдэгдэл хүлээн авах
            try {
                // Direct registration - simplified to minimize potential issues
                hubConnection.On<int, FlightStatus>("ReceiveFlightStatusUpdate", HandleStatusUpdateDirectly);
                Console.WriteLine("Successfully registered ReceiveFlightStatusUpdate handler");
            }
            catch (Exception ex) {
                Console.WriteLine($"Error registering SignalR event handler: {ex.Message}");
            }
            
            // Add reconnection event handlers
            hubConnection.Closed += async (error) => {
                Console.WriteLine($"SignalR connection closed due to: {error?.Message}");
                await Task.Delay(new Random().Next(0, 5) * 1000);
                await ConnectToSignalR();
            };
            
            // Connect to hub
            await ConnectToSignalR();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    // Simplified direct handler for status updates
    private async Task HandleStatusUpdateDirectly(int flightId, FlightStatus newStatus)
    {
        Console.WriteLine($"[DIRECT HANDLER] Received status update: Flight={flightId}, Status={newStatus} ({(int)newStatus})");
        await HandleFlightStatusUpdate(flightId, newStatus);
    }

    // Connect to SignalR hub
    private async Task ConnectToSignalR()
    {
        try {
            if (hubConnection == null) {
                Console.WriteLine("Error: SignalR hub connection is null");
                return;
            }
            
            if (hubConnection.State != HubConnectionState.Connected) {
                Console.WriteLine($"Connecting to SignalR hub (current state: {hubConnection.State})...");
                await hubConnection.StartAsync();
                Console.WriteLine($"Successfully connected to SignalR hub. Connection ID: {hubConnection.ConnectionId}");
            }
            else {
                Console.WriteLine($"Already connected to SignalR hub. Connection ID: {hubConnection.ConnectionId}");
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error connecting to SignalR hub: {ex.Message}");
            Console.WriteLine(ex.ToString());
            
            // Schedule retry after delay
            await Task.Delay(3000);
            await ConnectToSignalR();
        }
    }

    private async Task LoadFlightsFromApi()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var apiUrl = "http://localhost:5027/api/Flights";
            
            var response = await Http.GetFromJsonAsync<List<DataAccess.Models.Flight>>(apiUrl);

            if (response != null)
            {
                flights = response.Select(f => new FlightInfoModel
                {
                    Id = f.Id,
                    FlightNumber = f.FlightNumber,
                    DepartureCity = f.DepartureCity,
                    ArrivalCity = f.ArrivalCity,
                    DepartureTime = f.DepartureTime,
                    ArrivalTime = f.ArrivalTime,
                    Status = (int)f.Status
                }).ToList();
                
                foreach (var flight in flights)
                {
                    Console.WriteLine($"Flight: {flight.FlightNumber}, Time: {flight.Time}, Destination: {flight.Destination}, Gate: {flight.Gate}, Status: {flight.StatusText} (raw={flight.Status})");
                }
                
                Console.WriteLine($"Loaded {flights.Count} flights successfully");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading flight information: {ex.Message}";
            Console.WriteLine($"Error in LoadFlightsFromApi: {ex.Message}");
            Console.WriteLine(ex.ToString());
        }

        finally
        {
            isLoading = false;
        }
    }

    private string GetStatusClass(string status) => status switch
    {
        "Burtgej baina" => "status-checkin",
        "Ongotsond suulgaj baina" => "status-boarding",
        "Hooson" => "status-departed",
        "Hoishlogdson" => "status-delayed",
        "Tsutslasan" => "status-cancelled",
        _ => ""
    };
    
    // Function called when flight status changes (via SignalR)
    private async Task HandleFlightStatusUpdate(int flightId, DataAccess.Models.FlightStatus newStatus)
    {
        try
        {
            Console.WriteLine($"Handling flight status update notification: ID={flightId}, Status={newStatus} ({(int)newStatus})");
            
            // Find and update flight status
            var flight = flights.FirstOrDefault(f => f.Id == flightId);
            if (flight != null)
            {
                Console.WriteLine($"Found flight in list: {flight.FlightNumber}, current status={flight.Status} (StatusText={flight.StatusText})");
                
                // Store previous status for visual effect
                var oldStatus = flight.Status;
                
                // Create a completely new flight list to force UI refresh
                var newFlights = new List<FlightInfoModel>();
                
                // Copy all flights, updating only the one that changed
                foreach (var f in flights)
                {
                    if (f.Id == flightId)
                    {
                        // Create new flight with updated status
                        newFlights.Add(new FlightInfoModel
                        {
                            Id = f.Id,
                            FlightNumber = f.FlightNumber,
                            DepartureCity = f.DepartureCity,
                            ArrivalCity = f.ArrivalCity,
                            DepartureTime = f.DepartureTime,
                            ArrivalTime = f.ArrivalTime,
                            Status = (int)newStatus
                        });
                        
                        Console.WriteLine($"Updated flight: {f.FlightNumber}, new status={newStatus}");
                    }
                    else
                    {
                        // Keep unchanged flights
                        newFlights.Add(f);
                    }
                }
                
                // Replace entire flights collection
                flights = newFlights;
                
                // Debug each flight's status text
                foreach (var f in flights)
                {
                    Console.WriteLine($"DEBUG: Flight {f.FlightNumber} status={f.Status}, StatusText='{f.StatusText}'");
                }
                
                Console.WriteLine($"Flight status changed: {flight.FlightNumber}, old={((DataAccess.Models.FlightStatus)oldStatus)}, new={newStatus}");
                
                // Force immediate UI update
                await InvokeAsync(() => {
                    try {
                        StateHasChanged();
                        Console.WriteLine($"UI updated with StateHasChanged");
                    }
                    catch (Exception uiEx) {
                        Console.WriteLine($"Error updating UI: {uiEx.Message}");
                    }
                });
                
                Console.WriteLine($"Display updated: {flight.FlightNumber}, new status={flights.First(f => f.Id == flightId).StatusText}");
            }
            else
            {
                Console.WriteLine($"Flight not found ID={flightId}, attempting to reload flights");
                // Refresh all flights if flight is not found
                await LoadFlightsFromApi();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating status: {ex.Message}");
            Console.WriteLine(ex.ToString());
        }
    }
    // Dispose SignalR connection when component is disposed
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            Console.WriteLine("Disposing SignalR connection");
            await hubConnection.DisposeAsync();
        }
    }
}